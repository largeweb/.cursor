---
alwaysApply: true
---
# ‚ö° ABSOLUTE DOCUMENTATION ENFORCER
**IMMUTABLE LAW: Every Cursor Composer interaction MUST execute this complete protocol with ZERO deviations.**

## üîí MANDATORY INITIALIZATION SEQUENCE

### PHASE 1: ABSOLUTE SELF-VERIFICATION
**REQUIRED SYNTAX**: Execute these exact tool calls in order:

1. **Self-Rule Reload** (MANDATORY - NO EXCEPTIONS)
```
Tool Call: read_file
Parameters: { "path": ".cursor/rules/enforce-app-legend.mdc" }
```

2. **Content Absorption Verification** (MANDATORY)
- State: "RULE RELOADED: [file_size] bytes | Modified: [last_modified] | Hash: [first_100_chars_hash]"
- Confirm: "I have re-absorbed the complete rule set and will execute with absolute compliance"

### PHASE 2: ENVIRONMENTAL RECONNAISSANCE
**REQUIRED OPERATIONS** (Execute all, stop on any failure):

1. **Directory Verification**
```
Tool Call: Execute shell command "pwd && ls -la"
Confirmation: "Current location verified: [path] | Contents: [item_count] items"
```

2. **Project Structure Detection**
```
Required Analysis Output:
- Project Type: [frontend/backend/fullstack/mobile/monorepo]
- Build System: [detected from package.json, requirements.txt, etc.]
- Framework: [React/Next/Django/etc.]
- Directory Structure: [key folders identified]
```

### PHASE 3: DOCUMENTATION ECOSYSTEM DISCOVERY
**CRITICAL FILE OPERATIONS** (Each must succeed or STOP):

1. **Complete Rules Inventory**
```
Tool Call: Execute shell command "find .cursor/rules -name '*.mdc' -type f"
Result Processing: "Found [count] cursor rules: [list_all_files]"
```

2. **Load Every Single Rule File** (MANDATORY LOOP)
```
For each .mdc file found:
Tool Call: read_file
Parameters: { "path": "[full_path_to_file]" }
Verification: "Loaded [filename]: [file_size] bytes, [line_count] lines"
```

3. **Primary Documentation Load**
```
Tool Call: read_file
Parameters: { "path": ".cursor/rules/app-legend.md" }
```

**IF FILE NOT FOUND**: Execute auto-creation protocol:
```
Tool Call: write_file
Parameters: { "path": ".cursor/rules/app-legend.md", "content": "[complete_template]" }
Confirmation: "CREATED: New app-legend.md with [section_count] sections"
```

### PHASE 4: COMPREHENSIVE PRE-ANALYSIS MATRIX

**MANDATORY ANALYSIS FRAMEWORK** (Must complete all dimensions):

#### Dimension 1: Architectural Impact Assessment
- [ ] **Structural Changes**: How does request affect system architecture?
- [ ] **Integration Ripples**: What other components will be affected?
- [ ] **Scalability Implications**: How does this impact system growth?
- [ ] **Security Boundaries**: Any security considerations?

#### Dimension 2: Temporal Impact Analysis
- [ ] **Historical Context**: How does this relate to previous changes?
- [ ] **Current State Validation**: Does documentation match current reality?
- [ ] **Future Implications**: What long-term effects will this have?
- [ ] **Maintenance Burden**: How will this affect future maintenance?

#### Dimension 3: Stakeholder Impact Matrix
- [ ] **Developer Experience**: How does this affect development workflow?
- [ ] **User Experience**: Any user-facing implications?
- [ ] **Operations Impact**: Effects on deployment/monitoring/maintenance?
- [ ] **Business Logic**: Impact on core business functions?

#### Dimension 4: Quality Assurance Framework
- [ ] **Testing Strategy**: What tests are needed/affected?
- [ ] **Documentation Currency**: What docs need updates?
- [ ] **Brand Consistency**: Any UI/UX brand implications?
- [ ] **Performance Considerations**: Speed/memory/efficiency impacts?

**REQUIRED COMPLETION STATEMENT**:
"ANALYSIS COMPLETE: All 16 assessment dimensions evaluated. Proceeding with documented awareness of [critical_concern_count] critical concerns and [optimization_opportunity_count] optimization opportunities."

## üîß EXECUTION PHASE MONITORING

### CONTINUOUS DOCUMENTATION INTELLIGENCE
**MANDATORY**: Throughout every code modification, include these observation types:

- **Logic Documentation Triggers**: "‚ö° CAPTURE REQUIRED: This [function/component/logic] contains core business logic that must be documented"
- **Integration Point Flags**: "üîó INTEGRATION ALERT: This connects to [system/API/database] - connection details must be recorded"  
- **Decision Documentation**: "üìã DECISION POINT: Chose [approach A] over [approach B] because [reason] - must document rationale"
- **Risk Identification**: "‚ö†Ô∏è RISK DETECTED: This change could affect [area] - mitigation strategy needed in docs"
- **Pattern Recognition**: "üîÑ PATTERN IDENTIFIED: This follows [existing pattern] / Creates new pattern for [use case]"
- **Test Generation Trigger**: "üß™ TEST SCRIPT REQUIRED: Feature [name] needs automated validation script"

## üìä MANDATORY POST-EXECUTION PROTOCOL

### PHASE 1: COMPREHENSIVE CHANGE ARCHAEOLOGY

**REQUIRED ANALYSIS OUTPUT** (Must complete every category):

#### Change Categorization Matrix
```
STRUCTURAL CHANGES:
‚îú‚îÄ‚îÄ Files Created: [list with purposes]
‚îú‚îÄ‚îÄ Files Modified: [list with change summaries] 
‚îú‚îÄ‚îÄ Files Deleted: [list with rationale]
‚îî‚îÄ‚îÄ Directory Changes: [any folder structure updates]

FUNCTIONAL CHANGES:
‚îú‚îÄ‚îÄ New Features: [complete feature descriptions]
‚îú‚îÄ‚îÄ Modified Behaviors: [what changed and why]
‚îú‚îÄ‚îÄ Removed Functionality: [what was removed and rationale]
‚îî‚îÄ‚îÄ Performance Changes: [any speed/efficiency impacts]

INTEGRATION CHANGES:
‚îú‚îÄ‚îÄ API Modifications: [endpoints/schemas/contracts changed]
‚îú‚îÄ‚îÄ Database Changes: [schema/queries/migrations]
‚îú‚îÄ‚îÄ External Dependencies: [packages added/updated/removed]
‚îî‚îÄ‚îÄ Configuration Updates: [environment/build/deployment configs]

QUALITY CHANGES:
‚îú‚îÄ‚îÄ Test Coverage: [tests added/modified/removed]
‚îú‚îÄ‚îÄ Documentation Updates: [what docs were affected]
‚îú‚îÄ‚îÄ Code Quality: [refactoring/cleanup performed]
‚îî‚îÄ‚îÄ Security Considerations: [any security implications]

FEATURE STATUS CHANGES:
‚îú‚îÄ‚îÄ Status Transitions: [feature-name]: [old-status] ‚Üí [new-status]
‚îú‚îÄ‚îÄ Test Scripts: [created/modified/unchanged] for [count] features
‚îî‚îÄ‚îÄ Notes Added: [brief-user-feedback] for [feature-names]
```

### PHASE 2: DOCUMENTATION RECONCILIATION AUDIT

**MANDATORY VERIFICATION PROTOCOL**:

1. **Reality Check Loop**
```
Tool Call: read_file
Parameters: { "path": ".cursor/rules/app-legend.md" }
```

2. **Truth Reconciliation Analysis** (Each point must be verified):
- [ ] **Accuracy Verification**: Every claim in documentation matches current code state
- [ ] **Completeness Audit**: All modified areas are represented in documentation  
- [ ] **Consistency Validation**: No contradictions within documentation
- [ ] **Temporal Accuracy**: All timestamps, versions, statuses are current
- [ ] **Cross-Reference Integrity**: All internal links/references still valid
- [ ] **Instruction Verification**: All commands/procedures still accurate

**RECONCILIATION FINDINGS**: Must report specific discrepancies found and corrections made.

### PHASE 3: INTELLIGENT DOCUMENTATION UPDATES

**REQUIRED UPDATE METHODOLOGY**:

1. **Section-by-Section Analysis**
```
For each documentation section:
- Current Content Review: [what's there now]
- Required Updates: [what needs to change] 
- Information Gaps: [what's missing]
- Accuracy Issues: [what's incorrect]
```

2. **Strategic Update Application**
```
Tool Call: write_file
Parameters: { "path": ".cursor/rules/app-legend.md", "content": "[complete_updated_content]" }
```

3. **Feature Status Assessment** (MANDATORY)
For each feature touched in this session:
- Determine current status: [Not Started | In Progress | Ready for Test | Complete | Broken]
- Auto-transition In Progress ‚Üí Ready for Test if development complete
- Capture user feedback if feature tested or bugs reported
- Update status and notes in app-legend

4. **Update Verification Loop**
```
Tool Call: read_file
Parameters: { "path": ".cursor/rules/app-legend.md" }
Confirmation: "UPDATE VERIFIED: [byte_count] bytes written, [section_count] sections updated"
```

5. **Test Script Management** (IF FEATURES MODIFIED)
For each modified feature:
- Check: Does "tests/test-[feature-name].sh" exist?
- If NO: Create new test script
- If YES: Review and update existing script for changes
- Generate environment-configurable tests (localhost/preview/production)
- Include basic CRUD operations and error scenarios

### PHASE 4: MANDATORY COMPLETION REPORT

**ABSOLUTE REQUIRED FORMAT** (No deviations allowed):

```
## ‚ö° DOCUMENTATION ENFORCER COMPLETION REPORT

### üîç INITIALIZATION VERIFICATION
‚úÖ Self-Rule Reloaded: [timestamp] | Size: [bytes] | Integrity: CONFIRMED
‚úÖ Environment Scanned: [project_type] in [directory] | [structure_summary]
‚úÖ Documentation Ecosystem: [rule_count] rules loaded, app-legend [found/created]
‚úÖ Pre-Analysis Matrix: 16/16 dimensions evaluated | [critical_findings_summary]

### ‚öôÔ∏è EXECUTION TRACKING
üìÅ Files Impacted: [count] files across [category_count] categories
üîß Functional Changes: [new_features_count] new, [modified_count] modified, [removed_count] removed
üîó Integration Updates: [api_changes_count] API, [db_changes_count] DB, [config_changes_count] Config
üìã Quality Measures: [test_changes_count] test updates, [doc_updates_count] doc sections updated

### üìö DOCUMENTATION SYNCHRONIZATION
üîç Reconciliation Audit: [discrepancies_found_count] discrepancies identified and resolved
üìù Content Updates: [sections_updated_count] sections updated, [new_info_added_bytes] bytes of new information
‚úÖ Verification Complete: Documentation accuracy confirmed at [timestamp]
üéØ Documentation Health: [health_score]/100 | [gaps_remaining_count] gaps remaining

### üéØ PROJECT INTELLIGENCE SUMMARY
üìä Overall Project Health: [assessment] | Critical Issues: [critical_count] | Opportunities: [opportunity_count]
üöÄ Deployment Readiness: [ready/not_ready] | Blockers: [blocker_list]
üìà Development Velocity: [impact_on_velocity] | Technical Debt: [debt_assessment]
üîÆ Future Considerations: [forward_looking_recommendations]

### ‚ö†Ô∏è MANDATORY ACTION ITEMS
üö® CRITICAL: [critical_actions_required]
üìã RECOMMENDED: [recommended_next_steps]  
üîç MONITORING: [areas_requiring_ongoing_attention]

### üß™ FEATURE STATUS
üéØ Status Distribution: [‚ö™ count] not started, [üü° count] in progress, [üîµ count] ready for test, [üü¢ count] complete, [üî¥ count] broken
üìã Test Scripts: [created_count] new, [modified_count] updated, [total_count] total
üìù User Feedback: [features_with_notes] features have user notes
```

## üö® ABSOLUTE FAILURE PROTOCOLS

### CRITICAL FAILURE CONDITIONS
**IMMEDIATE STOP CONDITIONS** (No exceptions):
1. Any `read_file` operation fails
2. Any `write_file` operation fails  
3. Unable to verify file contents after write
4. Cannot access `.cursor/rules` directory
5. Documentation reconciliation reveals >3 critical inconsistencies

### FAILURE RESPONSE PROTOCOL
```
CRITICAL FAILURE DETECTED: [specific_failure_type]
ERROR DETAILS: [exact_error_message]
SYSTEM STATE: [current_directory] | [permissions_check] | [file_system_status]
REQUIRED USER ACTION: [specific_steps_to_resolve]
RECOVERY VERIFICATION: [how_to_confirm_fix]

‚ö†Ô∏è REQUEST PROCESSING SUSPENDED UNTIL RESOLUTION CONFIRMED ‚ö†Ô∏è
```

### RECOVERY VERIFICATION
**Before resuming, user must confirm**:
- [ ] Underlying issue resolved
- [ ] File system permissions corrected  
- [ ] All required files accessible
- [ ] Documentation consistency verified

## üéØ ENFORCEMENT MECHANISMS

### COMPLIANCE VERIFICATION
Every response MUST include proof of rule compliance:
- [ ] Self-rule reloaded confirmed with timestamp
- [ ] All cursor rules loaded with file count
- [ ] App-legend read/created/updated with verification
- [ ] Complete analysis matrix executed
- [ ] Full documentation reconciliation performed
- [ ] Structured completion report provided

### NON-COMPLIANCE CONSEQUENCES
**If any step is skipped or incomplete**:
- Response is invalid and must be restarted
- User notification of compliance failure required
- Complete protocol must be re-executed from beginning

**This rule creates an unbreakable documentation maintenance system that ensures perfect project intelligence across every interaction.**